//
// Created by kellerberrin on 24/04/23.
//

#ifndef KGL_VARIANT_FILTER_TYPE_H
#define KGL_VARIANT_FILTER_TYPE_H

#include "kgl_variant_filter_virtual.h"
#include "kgl_variant_db_genome.h"

#include <map>
#include <vector>


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


namespace kellerberrin::genome {   //  organization level namespace



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class FilterGenomes : public BaseFilter {

public:

  FilterGenomes() = default;
  ~FilterGenomes() override = default;

  [[nodiscard]] virtual std::unique_ptr<GenomeDB> applyFilter(const GenomeDB& genome) const = 0;

private:

};


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class FilterContigs : public BaseFilter {

public:

  FilterContigs() = default;
  ~FilterContigs() override = default;

  [[nodiscard]] virtual std::unique_ptr<ContigDB> applyFilter(const ContigDB& contig) const = 0;

private:

};



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class FilterOffsets : public BaseFilter {

public:

  FilterOffsets() = default;
  ~FilterOffsets() override = default;

  [[nodiscard]] virtual std::unique_ptr<OffsetDB> applyFilter(const OffsetDB& variant) const = 0;

private:

};


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class FilterVariants : public BaseFilter {

public:

  FilterVariants() = default;
  ~FilterVariants() override = default;

  [[nodiscard]] virtual bool applyFilter(const Variant& variant) const = 0;

private:

};



} // Namespace

#endif //KGL_VARIANT_FILTER_TYPE_H
