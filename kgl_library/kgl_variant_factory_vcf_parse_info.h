//
// Created by kellerberrin on 10/5/20.
//

#ifndef KGL_VARIANT_FACTORY_PARSE_INFO_H
#define KGL_VARIANT_FACTORY_PARSE_INFO_H

#include "kel_exec_env.h"
#include "kgl_variant_factory_vcf_parse_header.h"

#include <string>
#include <string_view>
#include <array>


namespace kellerberrin::genome {   //  organization level namespace




/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This is an efficient single pass parser.
// In general std::string_view is work of the devil and a seg fault waiting to happen.
// But if the underlying string has the same guaranteed lifetime as the associated std::string_view(s) then a seg fault
// may not be inevitable.
using InfoParserMap = std::map<std::string_view, std::string_view>;
class VCFInfoParser {

public:

  // std::move the info string into this object for efficiency.
  explicit VCFInfoParser(std::string&& info) : info_(std::move(info)), info_view_(info_) {

    if (not parseInfo()) {

      ExecEnv::log().error("VCFInfoParser::VCFInfoParser, Problem parsing info field");

    }

  }
  ~VCFInfoParser() = default;

  [[nodiscard]] const InfoParserMap& getMap() const { return parsed_token_map_; }
  [[nodiscard]] const std::string& info() const { return info_; }
  [[nodiscard]] std::optional<std::string> getInfoField(const std::string& key) const;

private:

  std::string info_;
  std::string_view info_view_;
  InfoParserMap parsed_token_map_;

  constexpr static const char INFO_FIELD_DELIMITER_{';'};
  constexpr static const char INFO_VALUE_DELIMITER_{'='};

  [[nodiscard]] bool parseInfo();

};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The index structure for the INFO evidence. This structure is held in common via shared_ptrs by all variants that
// subscribed to a particular set of INFO fields.

enum class InfoEvidenceType { Float, Integer, String, FloatArray, IntegerArray, StringArray, Boolean, NotImplemented};

// A single evidence index, used to lookup an info field in a variant.
// The same index object can be used to look up data in all variants generated by a particular.
class InfoEvidenceHeader; // Fwd.
class InfoEvidenceIndex {

public:

  InfoEvidenceIndex(VCFInfoRecord vcfInfoRecord,
                    InfoEvidenceType type,
                    size_t index,
                    std::shared_ptr<const InfoEvidenceHeader> info_evidence_header)
  : vcfInfoRecord_(std::move(vcfInfoRecord)),
    type_(type),
    index_(index),
    info_evidence_header_(std::move(info_evidence_header)) {}
  InfoEvidenceIndex(const InfoEvidenceIndex&) = default; // Can be copied but not created externally.
  ~InfoEvidenceIndex() = default;

  [[nodiscard]] const VCFInfoRecord& infoRecord() const { return vcfInfoRecord_; }
  [[nodiscard]] InfoEvidenceType evidenceType() const { return type_; }

private:

  const VCFInfoRecord vcfInfoRecord_;
  const InfoEvidenceType type_;
  const size_t index_;
  std::shared_ptr<const InfoEvidenceHeader> info_evidence_header_; // Ensure the index knows which header it belongs to.

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// An indexed map of InfoEvidenceIndex. There is only one of these held by all variants with INFO evidence fields.
using InfoIndexMap = std::map<std::string, InfoEvidenceIndex>;
class InfoEvidenceHeader {

public:

  explicit InfoEvidenceHeader() {}
  InfoEvidenceHeader(const InfoEvidenceHeader&) = delete;
  ~InfoEvidenceHeader() = default;

  std::optional<const InfoEvidenceIndex> getIndex(const std::string& info) const;
  const InfoIndexMap& getMap() const { return info_index_map_; }

  // Note that this routine takes a shared_ptr to itself obtained from the info data factory. This is passed onto data objects.
  [[nodiscard]] bool setupEvidenceHeader(const VCFInfoRecordMap& vcf_info_map, std::shared_ptr<const InfoEvidenceHeader> self_ptr);

  static InfoEvidenceType convertVCFType(const VCFInfoRecord& vcf_info_item);

private:

  InfoIndexMap info_index_map_;


  constexpr static const char* INTEGER_ = "Integer";
  constexpr static const char* FLOAT_ = "Float";
  constexpr static const char* FLAG_ = "Flag";
  constexpr static const char* CHAR_STRING_ = "Character";
  constexpr static const char* STRING_ = "String";
  constexpr static const char* SCALAR_ = "1";
  constexpr static const char* FLAG_SCALAR_ = "0";

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The info data block held by each variant.
class EvidenceFactory; // Fwd.
class InfoDataBlock {

public:

  friend InfoEvidenceHeader;
  friend EvidenceFactory;
  InfoDataBlock(std::shared_ptr<InfoEvidenceHeader> info_evidence_header) : info_evidence_header_(std::move(info_evidence_header)) {}
  InfoDataBlock(const InfoEvidenceHeader&) = delete;
  ~InfoDataBlock() = default;

private:


  std::shared_ptr<InfoEvidenceHeader> info_evidence_header_; // The data header.

  // The stored data.
  std::vector<std::pair<bool, double>> float_data_;
  std::vector<std::pair<bool, long>> integer_data_;
  std::vector<std::pair<bool, std::string>> string_data_;
  std::vector<std::pair<bool, std::vector<double>>> float_array_data_;
  std::vector<std::pair<bool, std::vector<long>>> integer_array_data_;
  std::vector<std::pair<bool, std::vector<std::string>>> string_array_data_;


};





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The evidence factory creates a common evidence lookup object for all variants (to optimize memory usage).
// The evidence factory also creates an evidence object for each variant.


class EvidenceFactory {

public:

  explicit EvidenceFactory(const EvidenceInfoSet& evidence_map)
  : evidence_map_(evidence_map),
    info_evidence_header_(std::make_shared<InfoEvidenceHeader>()) {}
  ~EvidenceFactory() = default;

  void availableInfoFields(const VCFInfoRecordMap& vcf_info_map);
  [[nodiscard]] std::optional<std::unique_ptr<InfoDataBlock>> createVariantEvidence(std::string&& info);

private:

  // The evidence fields specified in the runtime XML file.
  const EvidenceInfoSet evidence_map_;
  // available info fields parsed from the VCF header.
  VCFInfoRecordMap active_info_map_;
  // The info header block
  std::shared_ptr<InfoEvidenceHeader> info_evidence_header_;

};



} // namespace




#endif //KGL_KGL_VARIANT_FACTORY_GRCH_INFO_H
