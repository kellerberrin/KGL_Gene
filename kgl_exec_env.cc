//
// Created by kellerberrin on 30/09/17.
//


#include <iostream>
#include <seqan/arg_parse.h>
#include "kgl_exec_env.h"
#define BOOST_FILESYSTEM_NO_DEPRECATED // Recommended by boost documentation.
#include <boost/filesystem.hpp>

// Define namespace alias
namespace fs = boost::filesystem;
namespace kgl = kellerberrin::genome;

// Static member declarations.
kgl::ExecEnv::arg_struct kgl::ExecEnv::args_;
std::unique_ptr<kgl::Logger> kgl::ExecEnv::log_ptr_;
constexpr const char* kgl::ExecEnv::MODULE_LOG_NAME;

// Parse the command line.
bool kgl::ExecEnv::parseCommandLine(int argc, char const ** argv)
{
  // Setup ArgumentParser.
  seqan::ArgumentParser parser("kgl_snp");
  // Set short description, version, and date.
  setShortDescription(parser, "Organism Genome Comparison");
  setVersion(parser, "0.1");
  setDate(parser, "October 2017");

  // Define usage line and long description.
  addUsageLine(parser, "-d <work.directory>  -f <ref.fasta> -g <ref.gff> -m <mutant.sam>");

  const char* program_desc =
  R"("kgl_snp" is a very fast C++ program to find genetic differences (SNPs) in (optional)
  parent and mutant pairs by comparing genomic sequencing reads aligned to the same reference genome.
  If the optional --parent flag is specified then the mutant genome is compared to the parent genome and
  the reference genome. The parent genome is also compared to the reference genome. If the --parent flag"
  is not specified then the --mutant is compared to the reference FASTA genome only.
  This program takes the genome FASTA file, the corresponding gene model in GFF3 (only) format, and the
  (optional) parent and mutant SAM files, respectively. Source FASTQ files should be filtered for quality
  and aligned to the FASTA reference genome with a tool such as BowTie2 or bwa, and output in SAM/BAM format.)";

  addDescription(parser, program_desc);


  // Define Options -- Section Modification Options
  addSection(parser, "Modification Options");

  const char* dir_desc =
  R"(The work directory where log files and data files are found.
  Use a Linux style directory specification with trailing forward
  slash '/' (default './Work/').
  Important - to run 'kgl_snp' this directory must exist, it will not be created.)";

  addOption(parser, seqan::ArgParseOption("d", "workDirectory", dir_desc,
                                          seqan::ArgParseArgument::OUTPUT_DIRECTORY, "DIRECTORY"));

  const char* gff_desc =
  R"(The gff3 (not GFF2 or GTF) file that contains the genes, exons, etc for the
  chromosome(s)/contiguous region(s) of interest)";

  addOption(parser, seqan::ArgParseOption("g", "gffFile", gff_desc,
                                          seqan::ArgParseArgument::INPUT_FILE, "GFF_FILE"));

  const char* fasta_desc =
  R"(The fasta file that contains the reference nucleotide sequence for the chromsome(s) of interest)";

  addOption(parser, seqan::ArgParseOption("f", "fastaFile", fasta_desc,
                                          seqan::ArgParseArgument::INPUT_FILE, "FASTA_FILE"));

  const char* parent_desc =
  R"(The SAM file was generated by an aligner (bowtie, bwa) that read FASTQ files
  generated by sequencing the parent organism and assigned
  the sequences to a position with respect to the"
  reference genome specified by the --fasta flag)";

  addOption(parser, seqan::ArgParseOption("p", "parentFile", parent_desc,
                                          seqan::ArgParseArgument::INPUT_FILE, "PARENT_READS"));

  const char* mutant_desc =
  R"(The SAM file was generated by an aligner (bowtie, bwa) that read FASTQ files
  generated by sequencing the MUTANT organism
  and assigned the sequences to a position with respect to the
  reference genome specified by the --fasta flag)";

  addOption(parser, seqan::ArgParseOption("m", "mutantFile", mutant_desc,
                                          seqan::ArgParseArgument::INPUT_FILE, "MUTANT_READS"));

  const char* contig_desc =
  R"(Define which contiguous DNA region (chromosome/mitochondria) to process.
  Defaults to '*' for all contiguous regions.)";

  addOption(parser, seqan::ArgParseOption("c", "contig", contig_desc,
                                          seqan::ArgParseArgument::STRING, "CONTIG_ID"));

  const char* log_desc =
  R"(Log file. Appends the log to any existing logs (default "kgl_snp.log").'
  'The log file always resides in the work directory.)";

  addOption(parser, seqan::ArgParseOption("l", "logFile", log_desc,
                                          seqan::ArgParseArgument::OUTPUT_FILE, "LOG_FILE"));

  const char* newlog_desc =
  R"(Flush an existing log file (file name argument optional, (default "kgl_snp.log").
  The log file always resides in the work directory.)";

  addOption(parser, seqan::ArgParseOption("n", "newLogFile", newlog_desc,
                                          seqan::ArgParseArgument::OUTPUT_FILE, "TRUNC_LOG_FILE"));

  const char* mutant_min_count_desc =
  R"(The minimum SAM/BAM read coverage for the a single nucleotide analyzed in the Mutant genome.)";

  addOption(parser, seqan::ArgParseOption("mmc", "mutantMinimumCount", mutant_min_count_desc,
                                          seqan::ArgParseArgument::INTEGER, "INT"));

  const char* mutant_min_prop_desc =
  R"(The minimum proportion of a single nucleotide analyzed in the Mutant genome that is
  at variance from the reference (fasta) genome)";

  addOption(parser, seqan::ArgParseOption("mmp", "mutantMinimumProportion", mutant_min_prop_desc,
                                          seqan::ArgParseArgument::DOUBLE, "FLOAT"));

  const char* parent_min_count_desc =
  R"(The minimum SAM/BAM count of a single nucleotide analyzed in the Parent (wild-type)
  genome that is at variance from the reference (fasta) genome)";

  addOption(parser, seqan::ArgParseOption("pmc", "parentMinimumCount", parent_min_count_desc ,
                                          seqan::ArgParseArgument::INTEGER, "INT"));

  const char* parent_min_prop_desc =
  R"(The minimum proportion of a single nucleotide analyzed in the Parent (wild-type)
  genome that is at variance from the reference (fasta) genome)";

  addOption(parser, seqan::ArgParseOption("pmp", "parentMinimumProportion", parent_min_prop_desc,
                                          seqan::ArgParseArgument::DOUBLE, "FLOAT"));

  const char* thread_count_desc =
  R"(The number of CPU processes/threads assigned to processing genome data.
  Defaults to the number of CPU processors available (-1).)";

  addOption(parser, seqan::ArgParseOption("t", "threadCount", thread_count_desc,
                                          seqan::ArgParseArgument::INTEGER, "INT"));

  const char* queue_size_desc =
  R"(The maximum number of SAM/BAM records held in the inter-process record queue (default 1000000).)";

  addOption(parser, seqan::ArgParseOption("q", "queueSize", queue_size_desc,
                                          seqan::ArgParseArgument::INTEGER, "INT"));

  const char* read_quality_desc =
  R"(The nucleotide read quality as -10 log10 Pr {ReadError} e.g. 30 is a 1/1000 chance
  of an nucleotide read error. Defaults to 30. Set this value to 0 to disable quality checking.)";

  addOption(parser, seqan::ArgParseOption("rq", "readQuality", read_quality_desc,
                                          seqan::ArgParseArgument::INTEGER, "INT"));

  const char* lock_granularity_desc =
  R"(The number of nucleotide positions per inter-process write lock (less is faster).)";

  addOption(parser, seqan::ArgParseOption("lg", "lockGranularity", lock_granularity_desc,
                                          seqan::ArgParseArgument::INTEGER, "INT"));


  // Parse command line.
  seqan::ArgumentParser::ParseResult parse_result = seqan::parse(parser, argc, argv);

  if (parse_result == seqan::ArgumentParser::PARSE_HELP) {

    std::exit(EXIT_SUCCESS);  // Help, -h or --help flags used, so just exit.

  } else if (parse_result != seqan::ArgumentParser::PARSE_OK) {  // Problem parsing the command line.

    std::cerr << "Error - Problem Parsing Command Line. Use '-h' or '--help' for argument formats." << std::endl;
    std::cerr << "'kgl_snp' exits" << std::endl;
    std::exit(EXIT_FAILURE);

  }

  // Get the argument fields.
  if (seqan::isSet(parser, "workDirectory")) seqan::getOptionValue(args_.workDirectory, parser, "workDirectory");
  if (seqan::isSet(parser, "mutantFile")) seqan::getOptionValue(args_.mutantFile, parser, "mutantFile");

  std::cerr << "workDirectory:" << args().workDirectory << std::endl;

  fs::path full_path = fs::path(args().workDirectory) / fs::path(args().mutantFile);
  std::cerr << full_path << std::endl;
  args_.mutantFile = full_path.string();

  // Setup the Logger.
  log_ptr_ = std::make_unique<kgl::Logger>(MODULE_LOG_NAME, args().logFile);

  return true;

}




